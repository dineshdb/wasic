name: Release

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag (e.g., v1.0.0)"
        required: true
        type: string
      release_notes:
        description: "Release notes (optional, will use commit messages if not provided)"
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.release_tag }}
  cancel-in-progress: true

jobs:
  build-binaries:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_name: wasic
            asset_name: wasic-${{ github.event.inputs.release_tag }}-x86_64-unknown-linux-gnu.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            bin_name: wasic
            asset_name: wasic-${{ github.event.inputs.release_tag }}-aarch64-apple-darwin.tar.gz

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install tools
        run: |
          just install-tools

      - name: Build and validate
        run: |
          just lint

      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Package binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p artifacts
          cp "target/${{ matrix.target }}/release/${{ matrix.bin_name }}" artifacts/
          cd artifacts
          tar -czf "${{ matrix.asset_name }}" "${{ matrix.bin_name }}"

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p artifacts
          cp "target/${{ matrix.target }}/release/${{ matrix.bin_name }}" artifacts/
          cd artifacts
          7z a -tzip "${{ matrix.asset_name }}" "${{ matrix.bin_name }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: artifacts/${{ matrix.asset_name }}

  create-release:
    name: Create GitHub Release
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate Release Notes
        id: generate_release_notes
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const tag = context.ref.replace('refs/tags/', '');
            const releaseName = `Release ${tag}`;

            // Try to get release notes from the tag's annotation
            try {
              const tagData = await github.rest.git.getTag({
                owner,
                repo,
                tag_sha: context.sha,
              });
              if (tagData.data.message) {
                core.setOutput('notes', tagData.data.message);
                return;
              }
            } catch (e) {
              console.log('No tag annotation found, falling back to commit messages.');
            }

            // Fallback to commit messages since the last tag
            const { data: tags } = await github.rest.repos.listTags({
              owner,
              repo,
              per_page: 2,
            });

            let baseSha;
            if (tags.length > 1 && tags[1].name !== tag) {
              baseSha = tags[1].commit.sha;
            } else {
              // If no previous tag, get the first commit
              const { data: commits } = await github.rest.repos.listCommits({
                owner,
                repo,
                per_page: 1,
              });
              baseSha = commits[0].sha;
            }

            const { data: compare } = await github.rest.repos.compareCommits({
              owner,
              repo,
              base: baseSha,
              head: context.sha,
            });

            const notes = compare.commits.map(commit => {
              return `- ${commit.commit.message.split('\\n')[0]} (${commit.sha.substring(0, 7)})`;
            }).join('\\n');

            core.setOutput('notes', `## Changes\\n\\n${notes}`);

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          name: Release ${{ github.event.inputs.release_tag }}
          body: ${{ github.event.inputs.release_notes || steps.generate_release_notes.outputs.notes }}
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
